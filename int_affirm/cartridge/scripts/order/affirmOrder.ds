(function () {
	/**
	 * Creates library for working with Order
	 * Middleware layer between Affirm API and Demandware orders
	 *
	 * @constructor
	 * @this {Order}
	 * @returns Order instance
	 */
	var Order = function () {
		var logger = require('dw/system').Logger.getLogger('Affirm', ''),
			order = require('dw/order'),
			values = require('dw/value'),
			data = require('int_affirm/cartridge/scripts/data/affirmData.ds'),
			api = require('int_affirm/cartridge/scripts/api/affirmAPI.ds');
		
		/**
		 * Updates PaymentInstrument and Order system objects
		 * 
		 * @param {dw.order.Order} Order demnadware order instance
		 * @param {Object} Reponse auth response from Affirm
		 * @param {dw.order.PaymentProcessor} PaymentProcessor payment processor instance
		 * @param {dw.order.PaymentInstrument} PaymentInstrument payment isntrument instance
		 */
		this.updateAttributes = function (Order, Reponse, PaymentProcessor, PaymentInstrument) {
			
			try {
				PaymentInstrument.paymentTransaction.transactionID = Reponse.events[0].id;
				PaymentInstrument.paymentTransaction.amount = new values.Money(Reponse.amount, Order.currencyCode).divide(100);
				PaymentInstrument.paymentTransaction.setPaymentProcessor(PaymentProcessor);
				
				Order.custom.AffirmToken = Reponse.events[0].id;
				Order.custom.AffirmExternalId = Reponse.id;
				Order.custom.AffirmStatus = 'AUTH';
				Order.custom.AffirmPaymentAction = data.getAffirmPaymentAction();
			} catch (e) {
				logger.error('Affirm. File - affirmOrder.ds. Error - {0}', e);
			}
		};
		
		this.authOrder = api.auth;
		
		this.voidOrder = api.void;
		
		/**
		 * Capture new orders and update their afirm status. Used in Affirm job.
		 * 
		 * @see pipeline "Affirm"
		 */
		this.captureOrders = function () {
			order.OrderMgr.processOrders(function (order) {
				try {
					api.capture(order.custom.AffirmExternalId);
					order.custom.AffirmStatus = 'CAPTURE';
					order.setPaymentStatus(dw.order.Order.PAYMENT_STATUS_PAID);
					order.setStatus(dw.order.Order.ORDER_STATUS_COMPLETED);
				} catch (e) {
					logger.error('Affirm. File - affirmOrder.ds. Error - {0}', e);
				}
			}, '(status = {0} OR status = {1}) AND custom.AffirmPaymentAction = {2} AND custom.AffirmStatus = {3} AND shippingStatus = {4}', order.Order.ORDER_STATUS_NEW, order.Order.ORDER_STATUS_OPEN, 'CAPTURE', 'AUTH', order.Order.SHIPPING_STATUS_SHIPPED);
		};
		
		/**
		 * Void cancelled orders and update their afirm status. Used in Affirm job.
		 * 
		 * @see pipeline "Affirm"
		 */
		this.voidOrders = function () {
			order.OrderMgr.processOrders(function (order) {
				try {
					api.void(order.custom.AffirmExternalId);
					order.custom.AffirmStatus = 'VOIDED';
				} catch (e) {
					logger.error('Affirm. File - affirmOrder.ds. Error - {0}', e);
				}
			}, 'status = {0} AND custom.AffirmStatus = {1}', order.Order.ORDER_STATUS_CANCELLED, 'AUTH');
		};
		
		/**
		 * Refund captured orders and update their afirm status. Used in Affirm job.
		 * 
		 * @see pipeline "Affirm"
		 */
		this.refundOrders = function () {
			order.OrderMgr.processOrders(function (order) {
				try {
					api.refund(order.custom.AffirmExternalId);
					order.custom.AffirmStatus = 'REFUNDED';
				} catch (e) {
					logger.error('Affirm. File - affirmOrder.ds. Error - {0}', e);
				}
			}, 'status = {0} AND custom.AffirmStatus = {1}', order.Order.ORDER_STATUS_CANCELLED, 'CAPTURE');
		};
	};
	
	module.exports = new Order();
}());