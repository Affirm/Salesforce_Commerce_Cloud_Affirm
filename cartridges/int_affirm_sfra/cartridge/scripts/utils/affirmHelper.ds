'use strict';

/**
 * Controller that renders the home page.
 *
 * @module controllers/Affirm
 */
var AFFIRM_PAYMENT_METHOD = 'Affirm';
var Resource = require('dw/web/Resource');
var URLUtils = require('dw/web/URLUtils');
var server = require('server');
var BasketMgr = require('dw/order/BasketMgr');
var ISML = require('dw/template/ISML');
var affirm = require('int_affirm_sfra/cartridge/scripts/affirm.ds');
var COHelpers = require('*/cartridge/scripts/checkout/checkoutHelpers');
 
 
var Status = require('dw/system/Status');
var Transaction = require('dw/system/Transaction');
var PaymentMgr = require('dw/order/PaymentMgr');
var Order = require('dw/order/Order');
var PaymentMgr = require('dw/order/PaymentMgr');
var parametersMap = request.httpParameterMap;

/*
 * Export the publicly available controller methods
 */

function checkCart(cart) {
	var basket = 'object' in cart ? cart.object : cart;
	if (!cart.paymentInstrument){
		return {
			status:{
					error: true
				}
		}
	}
	var selectedPaymentMethod = cart.paymentInstrument.paymentMethod;
	if (!affirm.data.getAffirmOnlineStatus() || selectedPaymentMethod != 'Affirm'){
		return {
			status: new Status(Status.OK),
			authResponse: null
		};
	}
	if (affirm.data.getAffirmVCNStatus() == 'on'){
		if (basket.totalGrossPrice.value != session.custom.affirmTotal || basket.giftCertificateTotalPrice.value > 0){
			return {
				status:{
					error: true,
					PlaceOrderError: new Status(Status.ERROR, 'basket.changed.error')
				}
			};
		} else {
			return {
				status:{
					error: false
				}
			};
		}
	} else {
		var test = parametersMap;
		var token = parametersMap.checkout_token.stringValue;
		if (empty(token)) {
			return {
				status:{
					error: true,
					PlaceOrderError: new Status(Status.ERROR, 'confirm.error.technical')
				}
			};
		}
		var affirmResponse = affirm.order.authOrder(token);
		session.custom.affirmResponseID = affirmResponse.response.id;
		session.custom.affirmFirstEventID = affirmResponse.response.events[0].id;
		session.custom.affirmAmount = affirmResponse.response.amount;
		if (empty(affirmResponse) || affirmResponse.error){
			return {
				status:{
					error: true,
					PlaceOrderError: new Status(Status.ERROR, 'confirm.error.technical')
				}
			};
		}
		var affirmStatus = affirm.basket.syncBasket(basket, affirmResponse.response);
		if (affirmStatus.error){
			affirm.order.voidOrder(affirmResponse.response.id);
            return {
    			status:{
    				error: affirmStatus.error,
    				PlaceOrderError: new Status(Status.ERROR, 'basket.changed.error')
    			}
    		};
        } else {
            return {
                status: {
                    error: false
                }
            }
        }
		
	}
}

function postProcess(order){
	var logger = require('dw/system').Logger.getLogger('Affirm', '');
	if (affirm.data.getAffirmPaymentAction() == 'CAPTURE'){
		try {
			Transaction.wrap(function(){
				affirm.order.captureOrder(order.custom.AffirmExternalId, order.orderNo);
				order.custom.AffirmStatus = 'CAPTURE';
				order.setPaymentStatus(Order.PAYMENT_STATUS_PAID);
				order.setStatus(Order.ORDER_STATUS_COMPLETED);
			});
		} catch (e) {
			affirm.order.voidOrder(order.custom.AffirmExternalId);
			logger.error('Affirm Capturing error. Details - {0}', e);
			return new Status(Status.ERROR);
		}
	}
	return new Status(Status.OK);
}

function redirect() {
	
	if(server.forms.getForm('billing').paymentMethod == AFFIRM_PAYMENT_METHOD  && affirm.data.getAffirmVCNStatus() != 'on'){
	var basket = BasketMgr.getCurrentBasket();	
		
	res.render('affirm/affirmcheckout_mf',{
			Basket : basket
	});
		 return true;
	} else {
		return false;
	}
}


function init(basket, applicablePaymentMethods) {
	return affirm.basket.validatePayments(basket, applicablePaymentMethods);
}

/**
 * Check if Affirm payment method can be applicable for checkout 
 */

function isAffirmApplicable(){
	var basket = BasketMgr.getCurrentBasket();
	if (!basket.getGiftCertificateLineItems().empty || !affirm.data.getAffirmOnlineStatus() || affirm.data.getAffirmPaymentOnlineStatus() || !affirm.utils.checkBasketTotalRange('object' in basket ? basket.object : basket)) {
		return false;	
	}

	return true;
}


/**
 * Redirects customer to affirm's checkout if affirm is enabled and there is no
 * gift certificates in basket
 */

module.exports = {
		Redirect: redirect,
		Init: init,
		CheckCart: checkCart,
		PostProcess: postProcess,
		IsAffirmApplicable: isAffirmApplicable
}
